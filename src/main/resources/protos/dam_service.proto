// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// Package dam provides protocol buffer versions of the DAM API, allowing
// end points to receive requests and returns responses using these messages.
package dam.v1;

message DamConfig {
  string version = 1;
  int64 revision = 2;
  double commit_time = 3;
  map<string, TrustedPassportIssuer> trusted_passport_issuers = 4;
  map<string, TrustedSource> trusted_sources = 5;
  map<string, Policy> policies = 6;
  map<string, Resource> resources = 7;
  map<string, Client> clients = 8;
  map<string, ServiceTemplate> service_templates = 9;
  map<string, ClaimDefinition> claim_definitions = 10;
  map<string, TestPersona> test_personas = 11;
  ConfigOptions options = 12;
  map<string, string> ui = 13;
}

message TrustedPassportIssuer {
  string issuer = 1;
  string translate_using = 2;
  map<string, string> ui = 3;
}

message TrustedSource {
  repeated string sources = 1;
  repeated string claims = 2;
  map<string, string> ui = 3;
}

message Condition {
  oneof key {
    string claim = 1;
    string data_use = 2;
    string user_list = 3;
  }
  string is = 4;
  repeated string values = 5;
  repeated string from = 6;
  repeated Condition all_true = 7;
  repeated Condition any_true = 8;
}

message Policy {
  Condition allow = 1;
  Condition disallow = 2;
  map<string, string> ui = 3;
}

message PolicyBasis {
  string name = 1;
  string type = 2;
  repeated string clauses = 3;
}

message View {
  message Interface {
    repeated string uri = 1;
  }
  message Item {
    map<string, string> vars = 1;
  }
  string service_template = 1;
  string version = 2;
  string topic = 3;
  string partition = 4;
  string fidelity = 5;
  string geo_location = 6;
  repeated string content_types = 7;
  map<string, AccessRole> access_roles = 8 [json_name = "roles"];
  repeated Item items = 9;
  string aud = 10;
  string default_role = 11;
  map<string, string> ui = 12;
  // Computed fields.
  map<string, Interface> computed_interfaces = 13 [json_name = "interfaces"];
}

message Resource {
  string umbrella = 1;
  map<string, View> views = 2;
  repeated string clients = 3;
  string max_token_ttl = 4;
  map<string, string> ui = 5;
}

message Client {
  string client_id = 1;
  int64 revision = 2;
  double commit_time = 3;
  map<string, string> ui = 4;
}

message ServiceTemplate {
  string target_adapter = 1;
  string item_format = 2;
  map<string, string> interfaces = 3;
  map<string, ServiceRole> service_roles = 4 [json_name = "roles"];
  map<string, string> ui = 5;
}

message ServiceRole {
  repeated string target_roles = 1;
  repeated string target_scopes = 2;
  repeated string dam_role_categories = 3;
  map<string, string> ui = 4;
}

message AccessRole {
  repeated string policies = 1;
  map<string, string> ui = 2;
  repeated PolicyBasis computed_policy_basis = 3 [json_name = "policyBasis"];
}

message ConfigOptions {
  message Descriptor {
    string label = 1;
    string description = 2;
    string regexp = 3;
    string type = 4;
    bool is_list = 5;
    repeated string enum_values = 6;
    string min = 7;
    string max = 8;
    string default_value = 9;
  }
  bool read_only_master_realm = 1;
  repeated string whitelisted_realms = 2;
  string gcp_managed_keys_max_requested_ttl = 3;
  int32 gcp_managed_keys_per_account = 4;
  string gcp_service_account_project = 5;
  map<string, Descriptor> computed_descriptors = 6 [json_name = "descriptors"];
}

message ClaimDefinition {
  map<string, string> ui = 2;
}

message AccessList {
  repeated string access = 1;
}

message TestPersona {
  message GA4GHClaim {
    message Condition {
      string source = 1;
      string value = 2;
      string by = 3;
    }
    string claim_name = 1;
    string source = 2;
    string value = 3;
    double asserted = 4;
    double expires = 5;
    map<string, Condition> condition = 6;
    string by = 7;
  }
  message TestIdentityToken {
    map<string, string> standard_claims = 1;
    repeated GA4GHClaim ga4gh_claims = 2;
  }
  TestIdentityToken id_token = 1;
  map<string, AccessList> resources = 2;
  map<string, string> ui = 3;
}

message HistoryEntry {
  int64 revision = 1;
  string user = 2;
  double commit_time = 3;
  string path = 4;
  string query = 5;
  string desc = 6;
  string method = 7;
  string change_type = 8;
  string original_value = 9;
  string change_request = 10;
}

message History {
  repeated HistoryEntry history = 1;
  string next_page_token = 2;
}

message TargetAdapter {
  message Requirements {
    bool target_role = 1;
    bool target_scope = 2;
    bool aud = 3;
  }
  message Properties {
    bool is_aggregate = 1;
    bool can_be_aggregated = 2;
    bool single_item = 3;
  }
  string platform = 1;
  Requirements requirements = 2;
  Properties properties = 3;
  map<string, ItemFormat> item_formats = 4;
  map<string, string> ui = 5;
}

message ItemFormat {
  map<string, VariableFormat> variables = 1;
  map<string, string> ui = 2;
}

message VariableFormat {
  string regexp = 1;
  bool optional = 2;
  map<string, string> ui = 3;
}

message Realm {}

message PassportTranslator {
  repeated string compatible_issuers = 1;
  map<string, string> ui = 2;
}

///////////////////////////////////////////////////

message BackgroundProcess {
  message Error {
    int64 timestamp = 1;
    string text = 2;
  }
  message Params {
    map<string, int64> int_params = 1;
  }
  message Status {
    int64 start_time = 1;
    int64 finish_time = 2;
    int64 last_error_timestamp = 3;
    map<string, int64> stats = 4;
    repeated Error errors = 5;
    Params params = 6;
  }
  message Project {
    int64 timestamp = 1;
    Params params = 2;
  }
  message Realm {
    int64 timestamp = 1;
    string project = 2;
    Params params = 3;
  }
  string process_name = 1;
  string instance = 2;
  int64 start_time = 3;
  int64 progress_time = 4;
  int64 finish_time = 5;
  int64 success_start_time = 6;
  int64 success_finish_time = 7;
  int64 settings_change_time = 8;
  map<string, Project> active_projects = 9;
  map<string, Realm> active_realms = 10;
  map<string, int64> cleanup_projects = 11;
  map<string, int64> dropped_projects = 12;
  map<string, Status> project_status = 13;
  Status success_status = 14;
}

///////////////////////////////////////////////////

message GetInfoRequest {}

message GetInfoResponse {
  string name = 1;
  repeated string versions = 2;
  int64 start_time = 3;
}

message RealmRequest {
  Realm item = 1;
}

message RealmResponse {}

message GetResourcesRequest {
  string filter = 1;
  string include = 2;
}

message GetResourcesResponse {
  map<string, Resource> resources = 1;
}

message GetFlatViewsRequest {}

message GetFlatViewsResponse {
  message FlatView {
    string resource_path = 1;
    string umbrella = 2;
    string resource_name = 3;
    string view_name = 4;
    string role_name = 5;
    string interface_name = 6;
    string interface_uri = 7;
    string content_type = 8;
    string version = 9;
    string topic = 10;
    string partition = 11;
    string fidelity = 12;
    string geo_location = 13;
    string target_adapter = 14;
    string platform = 15;
    string platform_service = 16;
    string max_token_ttl = 17;
    map<string, string> resource_ui = 18;
    map<string, string> view_ui = 19;
    map<string, string> role_ui = 20;
  }
  map<string, FlatView> views = 1;
}

message GetResourceRequest {}

message GetResourceResponse {
  Resource resource = 1;
  repeated string access = 2;
}

message GetViewsRequest {}

message GetViewsResponse {
  map<string, View> views = 1;
  repeated string access = 2;
}

message GetViewRequest {}

message GetViewResponse {
  View view = 1;
  repeated string access = 2;
}

message GetViewRolesRequest {}

message GetViewRolesResponse {
  map<string, AccessRole> roles = 1;
  repeated string access = 2;
}

message GetViewRoleRequest {}

message GetViewRoleResponse {
  AccessRole role = 1;
  repeated string access = 2;
}

message GetTokenRequest {
  string return = 1;
  string data_use = 2;
  int32 ttl = 3;
}

message GetTokenResponse {
  string name = 1;
  View view = 2;
  string account = 3;
  string token = 4;
  string ttl = 5;
}

message GetTestResultsRequest {}

message GetTestResultsResponse {
  message TestResult {
    string name = 1;
    string result = 2;
    map<string, AccessList> resources = 3;
    string error = 4;
  }

  string version = 1;
  int64 revision = 2;
  double timestamp = 3;
  map<string, TestPersona> personas = 4;
  repeated TestResult test_results = 5;
  ConfigModification modification = 6;
  int32 executed = 7;
  int32 passed = 8;
  string error = 9;
}

message ClientSecretRequest {}

message ClientSecretResponse {
  string secret = 1;
}

message TargetAdaptersRequest {}

message TargetAdaptersResponse {
  map<string, TargetAdapter> target_adapters = 1;
}

message PassportTranslatorsRequest {}

message PassportTranslatorsResponse {
  map<string, PassportTranslator> passport_translators = 1;
}

message DamRoleCategoriesRequest {}

message RoleCategory {
  int32 order = 1;
  map<string, string> ui = 2;
}

message DamRoleCategoriesResponse {
  map<string, RoleCategory> dam_role_categories = 1;
}

message GetTestPersonasRequest {}

message GetTestPersonasResponse {
  map<string, TestPersona> personas = 1;
  map<string, string> standard_claims = 2;
}

message BackgroundProcessesRequest {}

message BackgroundProcessesResponse {
  map<string, BackgroundProcess> processes = 1;
}

message BackgroundProcessRequest {}

message BackgroundProcessResponse {
  BackgroundProcess process = 1;
}

////////////////////////////////////////////////

message ConfigModification {
  message PersonaModification {
    map<string, AccessList> resources = 1;
    // TODO(cdvoisin): remove add_resources and remove_resources when DDAP no
    // longer needs them.
    map<string, AccessList> add_resources = 2;
    map<string, AccessList> remove_resources = 3;
  }

  int64 revision = 1;
  map<string, PersonaModification> test_personas = 2;
  bool dry_run = 3;
}

// ConfigResponse is a common response message across all config changes
message ConfigResponse {}

////////////////////////////////////////////////

message ConfigRequest {
  DamConfig item = 1;
  ConfigModification modification = 2;
}

message ConfigResourceRequest {
  Resource item = 1;
  ConfigModification modification = 2;
}

message ConfigViewRequest {
  View item = 1;
  ConfigModification modification = 2;
}

message ConfigTrustedPassportIssuerRequest {
  TrustedPassportIssuer item = 1;
  ConfigModification modification = 2;
}

message ConfigTrustedSourceRequest {
  TrustedSource item = 1;
  ConfigModification modification = 2;
}

message ConfigPolicyRequest {
  Policy item = 1;
  ConfigModification modification = 2;
}

message ConfigOptionsRequest {
  ConfigOptions item = 1;
  ConfigModification modification = 2;
}

message ConfigClaimDefinitionRequest {
  ClaimDefinition item = 1;
  ConfigModification modification = 2;
}

message ConfigServiceTemplateRequest {
  ServiceTemplate item = 1;
  ConfigModification modification = 2;
}

message ConfigTestPersonaRequest {
  TestPersona item = 1;
  ConfigModification modification = 2;
}

message ConfigClientRequest {
  Client item = 1;
  ConfigModification modification = 2;
}
