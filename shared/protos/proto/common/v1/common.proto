// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// Package com defines messages shared between IC and DAM server.
package common;

option go_package = "github.com/GoogleCloudPlatform/healthcare-federated-access-services/proto/common/v1";

message Assertion {
    message ConditionClause {
        string type = 1;
        string source = 2;
        string value = 3;
        string by = 4;
    }
    message Condition {
        repeated ConditionClause clauses = 1;
    }
    string type = 1;
    string source = 2;
    string value = 3;
    string asserted_duration = 4;
    string expires_duration = 5;
    repeated Condition conditions = 6;
    string by = 7;
    int64 asserted = 8;
    int64 exp = 9;
}

message Passport {
    map<string, string> standard_claims = 1;
    repeated Assertion ga4gh_assertions = 2;
    repeated bytes internal_encrypted_visas = 11;
}

message TestPersona {
    Passport passport = 1;
    repeated string access = 2;
    map<string, string> ui = 3;
}

message Permissions {
    message PermissionUser {
        map<string, int64> roles = 1;
        repeated string tags = 2;
    }
    string version = 1;
    int64 revision = 2;
    double commit_time = 3;
    map<string, PermissionUser> users = 4;
}

message AccountTag {
    string category = 1;
    map<string, string> ui = 3;
}

// LoginState records states for login and login callback.
message LoginState {
    string idp_name = 1;
    string realm = 2;
    string client_id = 3;
    string scope = 4;
    string redirect = 5;
    string state = 7;
    string nonce = 6;
}

// AuthTokenState records states for create auth token.
message AuthTokenState {
    string redirect = 1;
    string subject = 2;
    string scope = 3;
    string provider = 4;
    string realm = 5;
    string state = 8;
    string nonce = 6;
    string login_hint = 7;
}

message TokenMetadata {
    string name = 1;
    string issued_at = 2;
    string expires = 3;
}

message HistoryEntry {
    int64 revision = 1;
    string user = 2;
    double commit_time = 3;
    string path = 4;
    string query = 5;
    string desc = 6;
    string method = 7;
    string change_type = 8;
    string original_value = 9;
    string change_request = 10;
}

message History {
    repeated HistoryEntry history = 1;
    string next_page_token = 2;
}