<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.3.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.dnastack</groupId>
    <artifactId>ddap-frontend</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>ddap-frontend</name>
    <description>Data Discovery and Access Platform - Frontend Service</description>

    <properties>
        <java.version>11</java.version>
        <angular.project.location>angular</angular.project.location>
        <angular.project.nodeinstallation>node_installation</angular.project.nodeinstallation>
        <spring-cloud.version>Greenwich.SR1</spring-cloud.version>
        <node.version>v10.16.0</node.version>
        <npm.version>6.9.0</npm.version>
        <protoc.version>3.7.0.2</protoc.version>
        <protobuf.version>3.7.1</protobuf.version>
        <jwt.version>0.10.5</jwt.version>
        <ddap-cli.version>1.0-15-g8298871</ddap-cli.version>
    </properties>

    <repositories>
        <repository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
        </repository>
        <repository>
            <id>dnastack-releases</id>
            <name>NexusDnastackReleases</name>
            <url>https://nexus.dnastack.com/content/repositories/releases/</url>
        </repository>
    </repositories>

    <dependencies>
        <!-- Spring -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-sleuth</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-gateway</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- JWT -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <version>${jwt.version}</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-impl</artifactId>
            <version>${jwt.version}</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-jackson</artifactId>
            <version>${jwt.version}</version>
            <scope>runtime</scope>
        </dependency>

        <!-- Proto -->
        <dependency>
            <groupId>com.google.protobuf</groupId>
            <artifactId>protobuf-java</artifactId>
            <version>${protobuf.version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.protobuf</groupId>
            <artifactId>protobuf-java-util</artifactId>
            <version>${protobuf.version}</version>
        </dependency>

        <!-- Other -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <dependency>
            <groupId>com.dnastack.ddap</groupId>
            <artifactId>ddap-cli</artifactId>
            <version>${ddap-cli.version}</version>
            <type>zip</type>
            <!-- This is here with test scope because:
                    * We need this dependency to be resolved by the go-offline
                    * The go-offline plugin doesn't support dynamic dependencies that aren't jars
                    * We don't want this dependency to end up in our jar twice (we copy it in with the dependency plugin)
                    * Provided scope would be better, but the spring boot plugin copies provided scope jars into your boot jar
             -->
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>27.1-jre</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>com.github.eirslett</groupId>
                    <artifactId>frontend-maven-plugin</artifactId>
                    <version>1.0</version>
                    <configuration>
                        <workingDirectory>${angular.project.location}</workingDirectory>
                        <installDirectory>${angular.project.nodeinstallation}</installDirectory>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>build-info</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.github.os72</groupId>
                <artifactId>protoc-jar-maven-plugin</artifactId>
                <version>${protoc.version}</version>
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <addProtoSources>all</addProtoSources>
                            <includeMavenTypes>direct</includeMavenTypes>
                            <inputDirectories>
                                <include>${basedir}/shared/protos</include>
                            </inputDirectories>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>1.4</version>
                <executions>
                    <execution>
                        <id>test</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${basedir}/target/generated-sources</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- Packaged here for CLI download link -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.1.1</version>
                <executions>
                    <execution>
                        <id>copy-cli-zip</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <artifactItems>
                        <artifactItem>
                            <groupId>com.dnastack.ddap</groupId>
                            <artifactId>ddap-cli</artifactId>
                            <version>${ddap-cli.version}</version>
                            <type>zip</type>
                            <overWrite>false</overWrite>
                            <outputDirectory>${project.build.directory}/classes/static</outputDirectory>
                            <destFileName>ddap-cli.zip</destFileName>
                        </artifactItem>
                    </artifactItems>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>install-npm-and-node</id>
            <activation>
                <file>
                    <missing>${angular.project.nodeinstallation}</missing>
                </file>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.github.eirslett</groupId>
                        <artifactId>frontend-maven-plugin</artifactId>
                        <executions>
                            <!-- It will install nodejs and npm -->
                            <execution>
                                <id>install</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>install-node-and-npm</goal>
                                </goals>
                                <configuration>
                                    <nodeVersion>${node.version}</nodeVersion>
                                    <npmVersion>${npm.version}</npmVersion>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>resolve-dependencies</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.github.eirslett</groupId>
                        <artifactId>frontend-maven-plugin</artifactId>
                        <executions>
                            <!-- It will execute command "npm install" inside "/angular" directory -->
                            <execution>
                                <id>dependencies</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>npm</goal>
                                </goals>
                                <configuration>
                                    <arguments>install --unsafe-perm</arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>de.qaware.maven</groupId>
                        <artifactId>go-offline-maven-plugin</artifactId>
                        <version>1.1.0</version>
                        <configuration>
                            <downloadSources>false</downloadSources>
                            <downloadJavadoc>false</downloadJavadoc>
                            <dynamicDependencies>
                                <DynamicDependency>
                                    <groupId>org.apache.maven.surefire</groupId>
                                    <artifactId>surefire-junit4</artifactId>
                                    <version>2.22.1</version>
                                    <repositoryType>PLUGIN</repositoryType>
                                </DynamicDependency>
                                <DynamicDependency>
                                    <groupId>org.apache.maven</groupId>
                                    <artifactId>maven-plugin-api</artifactId>
                                    <version>2.0.6</version>
                                    <repositoryType>PLUGIN</repositoryType>
                                </DynamicDependency>
                                <DynamicDependency>
                                    <groupId>org.apache.maven</groupId>
                                    <artifactId>maven-project</artifactId>
                                    <version>2.0.6</version>
                                    <repositoryType>PLUGIN</repositoryType>
                                </DynamicDependency>
                                <DynamicDependency>
                                    <groupId>org.apache.maven.shared</groupId>
                                    <artifactId>maven-filtering</artifactId>
                                    <version>1.0-beta-4</version>
                                    <repositoryType>PLUGIN</repositoryType>
                                </DynamicDependency>
                                <DynamicDependency>
                                    <groupId>org.codehaus.plexus</groupId>
                                    <artifactId>plexus-interpolation</artifactId>
                                    <version>1.13</version>
                                    <repositoryType>PLUGIN</repositoryType>
                                </DynamicDependency>
                            </dynamicDependencies>
                        </configuration>
                        <executions>
                            <execution>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>resolve-dependencies</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>full-build</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.github.eirslett</groupId>
                        <artifactId>frontend-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>generate-proto</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>npm</goal>
                                </goals>
                                <configuration>
                                    <arguments>run proto</arguments>
                                </configuration>
                            </execution>
                            <!-- It will execute command "npm run build:prod" inside "/angular" directory
                                to clean and create "/dist" directory -->
                            <execution>
                                <id>build</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>npm</goal>
                                </goals>
                                <configuration>
                                    <arguments>run build:prod</arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Plugin to copy the content of /angular/dist/ directory to output
                        directory -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <version>2.4.2</version>
                        <executions>
                            <execution>
                                <id>default-copy-resources</id>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <overwrite>true</overwrite>
                                    <!-- This folder is the folder where your angular files
                                    will be copied to so that they end up in the fat jar. -->
                                    <outputDirectory>${project.build.directory}/classes/static/</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>
                                                ${project.basedir}/${angular.project.location}/dist/ddapfrontend/
                                            </directory>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                            <execution>
                                <id>copy-spring-boot-only</id>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <overwrite>true</overwrite>
                                    <!-- This folder is the folder where your angular files
                                    will be copied to so that they end up in the fat jar. -->
                                    <outputDirectory>${project.build.directory}/classes/static/</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>${project.basedir}/src/main/resources/static</directory>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
